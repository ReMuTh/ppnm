\relax 
\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{1}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {2}Basic construction}{1}\protected@file@percent }
\newlabel{eq:b_formula}{{4}{1}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Slope at end-points}{1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}Naive end-points}{1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2}Akima end points}{2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3}Bica's end points}{2}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {4}Optimization}{2}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {5}Results}{2}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Akima sub-splines on a dataset of $sin (x)$, with the $x$-values at irregular intervals. We notice that while the sub-spline (here using the Akima end point scheme) succeeds to connect the points smoothly, the resulting spline does not follow the mathematical sin(x) curve too well. The jagged line of the derivative (blue) is a tell-tell of the discontinuous second derivative â€“ a trade-off to avoid the oscillating artefacts of cubic spline. The mathematical derivative $cos(x)$ plotted for reference. The integral (green) behaves more gently. Mathematically the anti-derivative of $sin(x)$ would reach -2 at $x=0$ and be back at $0$ at $x =\pi $ and this is replicated acceptably by the spline integration.}}{3}\protected@file@percent }
\newlabel{fig:1}{{1}{3}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces For reference my Cubic spline routine on the same dataset as in figure 1\hbox {}. The cubic spline replicates $sin(x)$ and it's derivative excellently given just 8 input points over a full cycle.}}{3}\protected@file@percent }
\newlabel{fig:2}{{2}{3}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces A data with a sudden step from -1 to 1 and otherwise constant values dementrates the advantage of Akima sub-splines. While the cubic spline interpolation (blue) has damped oscillations on either side of the jump, the akima sub-splines (green) stays constant besides on the interval with the actual step.}}{4}\protected@file@percent }
\newlabel{fig:3}{{3}{4}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces The three different end-point schemes used on a dataset with irregular oscillations. As expected the difference is only in the first two and last two intervals. The intervals between them are identical. For comparison the cubic spline interpolation is also shown. }}{4}\protected@file@percent }
\newlabel{fig:4}{{4}{4}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces Comparing the input data set used in 4\hbox {} with interpolation values from Python's \texttt  {scipy.interpolate.Akima1DInterpolator}-routine. First of all the comparison verifies that my routine is calculating the sub-splines correctly. Secondly, I was curious on which end-point scheme is used by \texttt  {SciPy}. Not surprisingly it turns out to be Akima's own suggestion of doing the algorithm on a larger set of $p_i$s with two additional elements added at either end.}}{5}\protected@file@percent }
\newlabel{fig:5}{{5}{5}}
